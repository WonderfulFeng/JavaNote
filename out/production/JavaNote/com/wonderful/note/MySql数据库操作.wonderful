一、数据库操作：
    1.连接数据库: mysql -u root -p
    2.创建数据库：create database Wonderful;
    3.选择数据库：use Wonderful;
    4.删除数据库：drop database Wonderful;
    5.查看数据库编码：show variables like "character%";
    6.设置数据库编码：
        mysql> set character_set_server=utf8 ;
        mysql> set character_set_client=utf8 ;
        mysql> set character_set_connection=utf8 ;
        mysql> set character_set_database=utf8 ;
        mysql> set character_set_database=utf8 ;
        mysql> set character_set_results=utf8 ;
        mysql> set character_set_system=utf8 ;


二、数据类型：
    1.数值类型
        类型	        大小	    范围（有符号）	                                            范围（无符号）	                    用途
        TINYINT	        1 字节	    (-128，127)	                                                (0，255)	                        小整数值
        SMALLINT	    2 字节	    (-32 768，32 767)	                                        (0，65 535)	                        大整数值
        MEDIUMINT	    3 字节	    (-8 388 608，8 388 607)	                                    (0，16 777 215)	                    大整数值
        INT或INTEGER	4 字节	    (-2 147 483 648，2 147 483 647)	                            (0，4 294 967 295)	                大整数值
        BIGINT	        8 字节	    (-9 233 372 036 854 775 808，9 223 372 036 854 775 807)	    (0，18 446 744 073 709 551 615)	    极大整数值
        FLOAT	        4 字节	    单精度浮点数值
        DOUBLE	        8 字节	    双精度浮点数值
        DECIMAL	        对DECIMAL(M,D) ，如果M>D，为M+2否则为D+2	依赖于M和D的值	依赖于M和D的值	小数值
    2.日期和时间类型
        类型	        大小(字节)    范围	                                    格式	            用途
        DATE	        3	          1000-01-01/9999-12-31	                    YYYY-MM-DD	        日期值
        TIME	        3	           '-838:59:59'/'838:59:59'	                HH:MM:SS	        时间值或持续时间
        YEAR	        1	           1901/2155	                            YYYY	            年份值
        DATETIME	    8	           1000-01-01 00:00:00/9999-12-31 23:59:59	YYYY-MM-DD HH:MM:SS	混合日期和时间值
        TIMESTAMP	    4	           YYYYMMDD HHMMSS	混合日期和时间值，时间戳
    3.字符串类型
        类型	        大小	                用途
        CHAR	        0-255字节	            定长字符串
        VARCHAR	        0-65535 字节	        变长字符串
        TINYBLOB	    0-255字节	            不超过 255 个字符的二进制字符串
        TINYTEXT	    0-255字节	            短文本字符串
        BLOB	        0-65 535字节	        二进制形式的长文本数据
        TEXT	        0-65 535字节	        长文本数据
        MEDIUMBLOB	    0-16 777 215字节	    二进制形式的中等长度文本数据
        MEDIUMTEXT	    0-16 777 215字节	    中等长度文本数据
        LONGBLOB	    0-4 294 967 295字节	    二进制形式的极大文本数据
        LONGTEXT	     0-4 294 967 295字节	极大文本数据

        CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。
        BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。
        BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。
        有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择


三、数据表操作：
     1.创建数据表：
         创建学生表：
         create table if not exists `Student`(
            `SN` varchar(10),
            `Sname` varchar(10),
            `Sage` datetime,
            `Ssex` varchar(10)
         );
         创建课程表：
         create table if not exists `Course`(
            `CN` varchar(10),
            `Cname` varchar(10),
            `TN` varchar(10)
         );
         创建教师表：
         create table if not exists `Teacher`(
            `TN` varchar(10),
            `Tname` varchar(10)
         );
         创建成绩表：
         create table if not exists `SC`(
            `SN` varchar(10),
            `CN` varchar(10),
            `score` decimal(18,1)
         );
     2.删除数据表: drop table HAHA;
     3.插入数据：
          学生表：
          insert into Student values("01" , "赵雷" , "1990-01-01" , "男");
          insert into Student values("02" , "钱电" , "1990-12-21" , "男");
          insert into Student values("03" , "孙风" , "1990-05-20" , "男");
          insert into Student values("04" , "李云" , "1990-08-06" , "男");
          insert into Student values("05" , "周梅" , "1991-12-01" , "女");
          insert into Student values("06" , "吴兰" , "1992-03-01" , "女");
          insert into Student values("07" , "郑竹" , "1989-07-01" , "女");
          insert into Student values("08" , "王菊" , "1990-01-20" , "女");
          insert into Student values("09" , "王二小" , "1990-01-20" , "女");
          +------+-----------+---------------------+------+
          | SN   | Sname     | Sage                | Ssex |
          +------+-----------+---------------------+------+
          | 01   | 赵雷      | 1990-01-01 00:00:00 | 男   |
          | 02   | 钱电      | 1990-12-21 00:00:00 | 男   |
          | 03   | 孙风      | 1990-05-20 00:00:00 | 男   |
          | 04   | 李云      | 1990-08-06 00:00:00 | 男   |
          | 05   | 周梅      | 1991-12-01 00:00:00 | 女   |
          | 06   | 吴兰      | 1992-03-01 00:00:00 | 女   |
          | 07   | 郑竹      | 1989-07-01 00:00:00 | 女   |
          | 08   | 王菊      | 1990-01-20 00:00:00 | 女   |
          | 09   | 王二小    | 1990-01-20 00:00:00 | 女   |
          +------+-----------+---------------------+------+

          课程表：
          insert into Course values("01" , "语文" , "02");
          insert into Course values("02" , "数学" , "01");
          insert into Course values("03" , "英语" , "03");
          +------+--------+------+
          | CN   | Cname  | TN   |
          +------+--------+------+
          | 01   | 语文   | 02   |
          | 02   | 数学   | 01   |
          | 03   | 英语   | 03   |
          +------+--------+------+

          教师表：
          insert into Teacher values("01" , "张三");
          insert into Teacher values("02" , "李四");
          insert into Teacher values("03" , "王五");
          +------+--------+
          | TN   | Tname  |
          +------+--------+
          | 01   | 张三   |
          | 02   | 李四   |
          | 03   | 王五   |
          +------+--------+

          成绩表：
          insert into SC values("01" , "01" , 80);
          insert into SC values("01" , "02" , 90);
          insert into SC values("01" , "03" , 99);
          insert into SC values("02" , "01" , 70);
          insert into SC values("02" , "02" , 60);
          insert into SC values("02" , "03" , 80);
          insert into SC values("03" , "01" , 80);
          insert into SC values("03" , "02" , 80);
          insert into SC values("03" , "03" , 80);
          insert into SC values("04" , "01" , 50);
          insert into SC values("04" , "02" , 30);
          insert into SC values("04" , "03" , 20);
          insert into SC values("05" , "01" , 76);
          insert into SC values("05" , "02" , 87);
          insert into SC values("06" , "01" , 31);
          insert into SC values("06" , "03" , 34);
          insert into SC values("07" , "02" , 89);
          insert into SC values("07" , "03" , 98);
          +------+------+-------+
          | SN   | CN   | score |
          +------+------+-------+
          | 01   | 01   |  80.0 |
          | 01   | 02   |  90.0 |
          | 01   | 03   |  99.0 |
          | 02   | 01   |  70.0 |
          | 02   | 02   |  60.0 |
          | 02   | 03   |  80.0 |
          | 03   | 01   |  80.0 |
          | 03   | 02   |  80.0 |
          | 03   | 03   |  80.0 |
          | 04   | 01   |  50.0 |
          | 04   | 02   |  30.0 |
          | 04   | 03   |  20.0 |
          | 05   | 01   |  76.0 |
          | 05   | 02   |  87.0 |
          | 06   | 01   |  31.0 |
          | 06   | 03   |  34.0 |
          | 07   | 02   |  89.0 |
          | 07   | 03   |  98.0 |
          +------+------+-------+

     4.删除数据: delete from SC where `S#`="09" and `C#`="03";
     5.更新数据：update SC  set "score"="0" where "S#"="09";
     6.查询数据：select `C#`,`score` from SC where `S#`  = "01" limit 2 offset 1;
     7.LIKE字句：select * from SC where score like "9%";
     8.ORDERBY排序：select * from SC order by score desc;
     9.GROUP BY语句：select Ssex, count(*) from Student group by Ssex;
     10.WITH ROLLUP语句：select coalesce(`S#`,"总平均分"),avg(score) as "score_sum" from SC group by `S#` with rollup;//将统计之后的数据再次统计
     11.连接操作：
        INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。
            select s.SN,s.Sname,SC.CN,c.Cname,SC.score  from Student as s inner join SC on SC.SN = s.SN inner join Course as c  on c.CN = SC.CN;
            《==》
            select s.SN,s.Sname,c.Cname,SC.score from Student as s ,SC,Course as c where s.SN = SC.SN and SC.CN = c.CN;
        LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。
             select s.SN,s.Sname,SC.CN,c.Cname,SC.score  from Student as s left join SC on SC.SN = s.SN left join Course as c  on c.CN = SC.CN;
        RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。
             select SC.CN,c.Cname,s.Sname,SC.score  from SC  left join Course as c  on c.CN = SC.CN right join Student as s on SC.SN = s.SN ;
     12.NULL值处理：
        IS NULL: 当列的值是 NULL,此运算符返回 true。
        IS NOT NULL: 当列的值不为 NULL, 运算符返回 true。
        <=>: 比较操作符（不同于=运算符），当比较的的两个值为 NULL 时返回 true。
        关于 NULL 的条件比较运算是比较特殊的。你不能使用 = NULL 或 != NULL 在列中查找 NULL 值 。
        在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 false，即 NULL = NULL 返回false 。
        MySQL 中处理 NULL 使用 IS NULL 和 IS NOT NULL 运算符。
            select * from Student where Ssex is null;
     13.REGEXP正则表达式：
        模式	    描述
        ^	        匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 之后的位置。
        $	        匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置。
        .	        匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。
        [...]	    字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。
        [^...]	    负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'。
        p1|p2|p3	匹配 p1 或 p2 或 p3。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。
        *	        匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
        +	        匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
        {n}	        n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
        {n,m}	    m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。

            select Sname from Student where Sname regexp '^王';//查找学生中姓王的
            select s.Sname,SC.score from Student as s join SC on s.SN = SC.SN and SC.score regexp '^9';//查找90-100成绩的学生
     14.事务：
         MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，
         也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！

         在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。
         事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。
         事务用来管理 insert,update,delete 语句

         一般来说，事务是必须满足4个条件（ACID）：：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。
         原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。
         一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。
         隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。
         持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。


         事务控制语句：
         BEGIN或START TRANSACTION；显式地开启一个事务；
         COMMIT；也可以使用COMMIT WORK，不过二者是等价的。COMMIT会提交事务，并使已对数据库进行的所有修改成为永久性的；
         ROLLBACK；有可以使用ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；
         SAVEPOINT identifier；SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT；
         RELEASE SAVEPOINT identifier；删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；
         ROLLBACK TO identifier；把事务回滚到标记点；
         SET TRANSACTION；用来设置事务的隔离级别。InnoDB存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。

     MYSQL 事务处理主要有两种方法：
        1、用 BEGIN, ROLLBACK, COMMIT来实现
            BEGIN 开始一个事务
            ROLLBACK 事务回滚
            COMMIT 事务确认

        2、直接用 SET 来改变 MySQL 的自动提交模式:
            SET AUTOCOMMIT=0 禁止自动提交
            SET AUTOCOMMIT=1 开启自动提交

四、ALTER命令：
     添加表字段：alter table test add height int;
     删除表字段：alter table test drop height;

     ！！！！！需要的时候学：！！！！！

五、索引：
     MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。
     索引分单列索引和组合索引：
        单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。
        组合索引，即一个索引包含多个列。

     创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。
     实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。
     上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，
     同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。
     建立索引会占用磁盘空间的索引文件。


五、习题
    1、查询"01"课程比"02"课程成绩高的学生的信息及课程分数
        select s.* ,sc1.score "01课程",sc2.score "02课程" from student s left join SC sc1 on s.SN=sc1.SN and sc1.CN="01" left join SC sc2 on s.SN = sc2.SN and sc2.CN="02" where sc1.score > sc2.score;
        +------+--------+---------------------+------+----------+----------+
        | SN   | Sname  | Sage                | Ssex | 01课程   | 02课程   |
        +------+--------+---------------------+------+----------+----------+
        | 02   | 钱电   | 1990-12-21 00:00:00 | 男   |     70.0 |     60.0 |
        | 04   | 李云   | 1990-08-06 00:00:00 | 男   |     50.0 |     30.0 |
        +------+--------+---------------------+------+----------+----------+

        1.1、查询同时存在"01"课程和"02"课程的情况 //null 值跟任何值比较都返回false
        select s.* ,sc1.score "01课程",sc2.score "02课程" from student s left join SC sc1 on s.SN=sc1.SN and sc1.CN="01" left join SC sc2 on s.SN = sc2.SN and sc2.CN="02" where sc1.score > sc2.score;
        +------+--------+---------------------+------+----------+----------+
        | SN   | Sname  | Sage                | Ssex | 01课程   | 02课程   |
        +------+--------+---------------------+------+----------+----------+
        | 02   | 钱电   | 1990-12-21 00:00:00 | 男   |     70.0 |     60.0 |
        | 04   | 李云   | 1990-08-06 00:00:00 | 男   |     50.0 |     30.0 |
        +------+--------+---------------------+------+----------+----------+

        1.2、查询同时存在"01"课程和"02"课程的情况和存在"01"课程但可能不存在"02"课程的情况(不存在时显示为null)(以下存在相同内容时不再解释)
        select s.* ,sc1.score "01课程",sc2.score "02课程" from student s left join SC sc1 on s.SN=sc1.SN and sc1.CN="01" left join SC sc2 on s.SN = sc2.SN and sc2.CN="02" where sc1.score > ifnull(sc2.score,0);
        +------+--------+---------------------+------+----------+----------+
        | SN   | Sname  | Sage                | Ssex | 01课程   | 02课程   |
        +------+--------+---------------------+------+----------+----------+
        | 02   | 钱电   | 1990-12-21 00:00:00 | 男   |     70.0 |     60.0 |
        | 04   | 李云   | 1990-08-06 00:00:00 | 男   |     50.0 |     30.0 |
        | 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |     31.0 |     NULL |
        +------+--------+---------------------+------+----------+----------+
    2、查询"01"课程比"02"课程成绩低的学生的信息及课程分数
        select s.* ,sc1.score "01课程",sc2.score "02课程" from student s left join SC sc1 on s.SN=sc1.SN and sc1.CN="01" left join SC sc2 on s.SN = sc2.SN and sc2.CN="02" where sc1.score > sc2.score;
        +------+--------+---------------------+------+----------+----------+
        | SN   | Sname  | Sage                | Ssex | 01课程   | 02课程   |
        +------+--------+---------------------+------+----------+----------+
        | 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |     80.0 |     90.0 |
        | 05   | 周梅   | 1991-12-01 00:00:00 | 女   |     76.0 |     87.0 |
        +------+--------+---------------------+------+----------+----------+

        2.1、查询同时存在"01"课程和"02"课程的情况
        select s.* ,sc1.score "01课程",sc2.score "02课程" from student s left join SC sc1 on s.SN=sc1.SN and sc1.CN="01" left join SC sc2 on s.SN = sc2.SN and sc2.CN="02" where sc1.score > sc2.score;
        +------+--------+---------------------+------+----------+----------+
        | SN   | Sname  | Sage                | Ssex | 01课程   | 02课程   |
        +------+--------+---------------------+------+----------+----------+
        | 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |     80.0 |     90.0 |
        | 05   | 周梅   | 1991-12-01 00:00:00 | 女   |     76.0 |     87.0 |
        +------+--------+---------------------+------+----------+----------+

        2.2、查询同时存在"01"课程和"02"课程的情况和不存在"01"课程但存在"02"课程的情况
        select s.* ,sc1.score "01课程",sc2.score "02课程" from student s left join SC sc1 on s.SN=sc1.SN and sc1.CN="01" left join SC sc2 on s.SN = sc2.SN and sc2.CN="02" where sc2.score > ifnull(sc1.score,0);
        +------+--------+---------------------+------+----------+----------+
        | SN   | Sname  | Sage                | Ssex | 01课程   | 02课程   |
        +------+--------+---------------------+------+----------+----------+
        | 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |     80.0 |     90.0 |
        | 05   | 周梅   | 1991-12-01 00:00:00 | 女   |     76.0 |     87.0 |
        | 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |     NULL |     89.0 |
        +------+--------+---------------------+------+----------+----------+

    3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩
        select s.SN,s.Sname,cast(avg(sc.score) as decimal(19,3)) as avgScore from student s ,SC sc where s.SN =sc.SN group by sc.SN having avgScore >60;
        +------+--------+----------+
        | SN   | Sname  | avgScore |
        +------+--------+----------+
        | 01   | 赵雷   |   89.667 |
        | 02   | 钱电   |   70.000 |
        | 03   | 孙风   |   80.000 |
        | 05   | 周梅   |   81.500 |
        | 07   | 郑竹   |   93.500 |
        +------+--------+----------+

    4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩
        select s.Sn ,s.Sname,cast(avg(sc.score) as decimal(19,3)) as avgScore from Student s ,SC sc where s.SN=sc.SN group by s.SN having avgScore < 60;
        +------+--------+----------+
        | Sn   | Sname  | avgScore |
        +------+--------+----------+
        | 04   | 李云   |   33.333 |
        | 06   | 吴兰   |   32.500 |
        +------+--------+----------+

        4.1、查询在sc表存在成绩的学生信息的SQL语句。
        select s.* from Student s right join SC sc on sc.SN = s.SN group by sc.SN;
        +------+--------+---------------------+------+
        | SN   | Sname  | Sage                | Ssex |
        +------+--------+---------------------+------+
        | 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |
        | 02   | 钱电   | 1990-12-21 00:00:00 | 男   |
        | 03   | 孙风   | 1990-05-20 00:00:00 | 男   |
        | 04   | 李云   | 1990-08-06 00:00:00 | 男   |
        | 05   | 周梅   | 1991-12-01 00:00:00 | 女   |
        | 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |
        | 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |
        +------+--------+---------------------+------+

        4.2、查询在sc表中不存在成绩的学生信息的SQL语句。
        select s.* from Student s left join SC sc on s.SN= sc.SN where sc.score is null;
        +------+-----------+---------------------+------+
        | SN   | Sname     | Sage                | Ssex |
        +------+-----------+---------------------+------+
        | 08   | 王菊      | 1990-01-20 00:00:00 | 女   |
        | 09   | 王二小    | 1990-01-20 00:00:00 | 女   |
        +------+-----------+---------------------+------+

    5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩
        select s.*,count(sc.CN) courseCount,cast(coalesce(sum(sc.score),0) as decimal(19,3)) sumScore
        from Student s left join SC sc on s.SN=sc.SN group by s.SN;
        +------+-----------+---------------------+------+-------------+----------+
        | SN   | Sname     | Sage                | Ssex | courseCount | sumScore |
        +------+-----------+---------------------+------+-------------+----------+
        | 01   | 赵雷      | 1990-01-01 00:00:00 | 男   |           3 |  269.000 |
        | 02   | 钱电      | 1990-12-21 00:00:00 | 男   |           3 |  210.000 |
        | 03   | 孙风      | 1990-05-20 00:00:00 | 男   |           3 |  240.000 |
        | 04   | 李云      | 1990-08-06 00:00:00 | 男   |           3 |  100.000 |
        | 05   | 周梅      | 1991-12-01 00:00:00 | 女   |           2 |  163.000 |
        | 06   | 吴兰      | 1992-03-01 00:00:00 | 女   |           2 |   65.000 |
        | 07   | 郑竹      | 1989-07-01 00:00:00 | 女   |           2 |  187.000 |
        | 08   | 王菊      | 1990-01-20 00:00:00 | 女   |           0 |    0.000 |
        | 09   | 王二小    | 1990-01-20 00:00:00 | 女   |           0 |    0.000 |
        +------+-----------+---------------------+------+-------------+----------+

        5.1、查询所有有成绩的SQL。
         select s.*,count(sc.CN) courseCount,cast(coalesce(sum(sc.score),0) as decimal(19,3)) sumScore
         from Student s right join SC sc on s.SN=sc.SN group by s.SN;
        +------+--------+---------------------+------+-------------+----------+
        | SN   | Sname  | Sage                | Ssex | courseCount | sumScore |
        +------+--------+---------------------+------+-------------+----------+
        | 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |           3 |  269.000 |
        | 02   | 钱电   | 1990-12-21 00:00:00 | 男   |           3 |  210.000 |
        | 03   | 孙风   | 1990-05-20 00:00:00 | 男   |           3 |  240.000 |
        | 04   | 李云   | 1990-08-06 00:00:00 | 男   |           3 |  100.000 |
        | 05   | 周梅   | 1991-12-01 00:00:00 | 女   |           2 |  163.000 |
        | 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |           2 |   65.000 |
        | 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |           2 |  187.000 |
        +------+--------+---------------------+------+-------------+----------+

        5.2、查询所有(包括有成绩和无成绩)的SQL。
        select s.*,count(sc.CN) courseCount,cast(coalesce(sum(sc.score),0) as decimal(19,3)) sumScore
        from Student s left join SC sc on s.SN=sc.SN group by s.SN;
        +------+-----------+---------------------+------+-------------+----------+
        | SN   | Sname     | Sage                | Ssex | courseCount | sumScore |
        +------+-----------+---------------------+------+-------------+----------+
        | 01   | 赵雷      | 1990-01-01 00:00:00 | 男   |           3 |  269.000 |
        | 02   | 钱电      | 1990-12-21 00:00:00 | 男   |           3 |  210.000 |
        | 03   | 孙风      | 1990-05-20 00:00:00 | 男   |           3 |  240.000 |
        | 04   | 李云      | 1990-08-06 00:00:00 | 男   |           3 |  100.000 |
        | 05   | 周梅      | 1991-12-01 00:00:00 | 女   |           2 |  163.000 |
        | 06   | 吴兰      | 1992-03-01 00:00:00 | 女   |           2 |   65.000 |
        | 07   | 郑竹      | 1989-07-01 00:00:00 | 女   |           2 |  187.000 |
        | 08   | 王菊      | 1990-01-20 00:00:00 | 女   |           0 |    0.000 |
        | 09   | 王二小    | 1990-01-20 00:00:00 | 女   |           0 |    0.000 |
        +------+-----------+---------------------+------+-------------+----------+

    6、查询"李"姓老师的数量
        select count(*) from Teacher t where t.Tname like "李%";
        +----------+
        | count(*) |
        +----------+
        |        1 |
        +----------+

    7、查询学过"张三"老师授课的同学的信息
        select s.* from student s,SC sc ,Course c,Teacher t where s.SN=sc.SN and c.CN = sc.CN and t.TN = c.TN and t.Tname ="张三";
        +------+--------+---------------------+------+
        | SN   | Sname  | Sage                | Ssex |
        +------+--------+---------------------+------+
        | 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |
        | 02   | 钱电   | 1990-12-21 00:00:00 | 男   |
        | 03   | 孙风   | 1990-05-20 00:00:00 | 男   |
        | 04   | 李云   | 1990-08-06 00:00:00 | 男   |
        | 05   | 周梅   | 1991-12-01 00:00:00 | 女   |
        | 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |
        +------+--------+---------------------+------+

    8、查询没学过"张三"老师授课的同学的信息
        select s2.* from Student s2 where s2.SN not in ( select s.SN from student s,SC sc ,Course c,Teacher t where s.SN=sc.SN and c.CN = sc.CN and t.TN = c.TN and t.Tname ="张三");
        +------+-----------+---------------------+------+
        | SN   | Sname     | Sage                | Ssex |
        +------+-----------+---------------------+------+
        | 06   | 吴兰      | 1992-03-01 00:00:00 | 女   |
        | 08   | 王菊      | 1990-01-20 00:00:00 | 女   |
        | 09   | 王二小    | 1990-01-20 00:00:00 | 女   |
        +------+-----------+---------------------+------+

    9、查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息
        select s.* from Student s ,SC sc1 ,SC sc2 where s.SN = sc1.SN and s.SN=sc2.Sn and sc1.CN="01" and sc2.CN="02";
        +------+--------+---------------------+------+
        | SN   | Sname  | Sage                | Ssex |
        +------+--------+---------------------+------+
        | 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |
        | 02   | 钱电   | 1990-12-21 00:00:00 | 男   |
        | 03   | 孙风   | 1990-05-20 00:00:00 | 男   |
        | 04   | 李云   | 1990-08-06 00:00:00 | 男   |
        | 05   | 周梅   | 1991-12-01 00:00:00 | 女   |
        +------+--------+---------------------+------+

    10、查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息
        方式一：select s2.* ,sc.CN from student s2 ,SC sc where s2.SN=sc.SN and sc.CN="01" and s2.SN not in (select distinct sc2.Sn from SC sc2 where sc2.SN=s2.SN and sc2.CN="02");
        方式二：select s.* from student s ,SC sc where s.SN =sc.SN and sc.CN="01" and not exists (select 1 from SC sc2 where sc2.SN =sc.SN and sc2.CN="02");
        +------+--------+---------------------+------+------+
        | SN   | Sname  | Sage                | Ssex | CN   |
        +------+--------+---------------------+------+------+
        | 06   | 吴兰   | 1992-03-01 00:00:00 | 女   | 01   |
        +------+--------+---------------------+------+------+

    11、查询没有学全所有课程的同学的信息
        方式一：select s.* from Student s ,(select Sc.SN sn,count(*) count from SC sc group by sc.SN ) tem,(select count(*) countC from Course)  tem2 where tem2.countC !=tem.count and tem.sn = s.SN;
        方式二：select * from Student s ,SC sc where s.Sn =sc.SN group by sc.SN having count(sc.CN) < (select count(cc.CN) from Course cc);
        +------+--------+---------------------+------+
        | SN   | Sname  | Sage                | Ssex |
        +------+--------+---------------------+------+
        | 05   | 周梅   | 1991-12-01 00:00:00 | 女   |
        | 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |
        | 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |
        +------+--------+---------------------+------+

        +------+--------+---------------------+------+------+------+-------+---+
        | SN   | Sname  | Sage                | Ssex | SN   | CN   | score | c |
        +------+--------+---------------------+------+------+------+-------+---+
        | 05   | 周梅   | 1991-12-01 00:00:00 | 女   | 05   | 01   |  76.0 | 2 |
        | 06   | 吴兰   | 1992-03-01 00:00:00 | 女   | 06   | 01   |  31.0 | 2 |
        | 07   | 郑竹   | 1989-07-01 00:00:00 | 女   | 07   | 02   |  89.0 | 2 |
        +------+--------+---------------------+------+------+------+-------+---+

    12、查询至少有一门课与学号为"01"的同学所学相同的同学的信息
        select s.*  from student s ,SC sc where s.SN =sc.SN and sc.SN != "01" and sc.CN in (select CN from SC where SC.SN="01") group by s.SN;
        +------+--------+---------------------+------+
        | SN   | Sname  | Sage                | Ssex |
        +------+--------+---------------------+------+
        | 02   | 钱电   | 1990-12-21 00:00:00 | 男   |
        | 03   | 孙风   | 1990-05-20 00:00:00 | 男   |
        | 04   | 李云   | 1990-08-06 00:00:00 | 男   |
        | 05   | 周梅   | 1991-12-01 00:00:00 | 女   |
        | 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |
        | 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |
        +------+--------+---------------------+------+

    13、查询和"01"号的同学学习的课程完全相同的其他同学的信息


    14、查询没学过"张三"老师讲授的任一门课程的学生姓名
        select * from Student where SN not in (select sc.SN from SC sc,Course c, Teacher t where sc.CN=c.CN and c.TN =t.TN and t.Tname="张三");
        +------+-----------+---------------------+------+
        | SN   | Sname     | Sage                | Ssex |
        +------+-----------+---------------------+------+
        | 06   | 吴兰      | 1992-03-01 00:00:00 | 女   |
        | 08   | 王菊      | 1990-01-20 00:00:00 | 女   |
        | 09   | 王二小    | 1990-01-20 00:00:00 | 女   |
        +------+-----------+---------------------+------+

--15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩
      方式一：select s.SN,s.SName,tem.avg from Student s ,( select sc.SN ,avg(sc.score) as "avg" from SC sc where sc.score < 60 group by sc.SN having count(sc.SN) >=1) tem where s.SN = tem.SN ;
      方式二：select sc.SN ,s.Sname,avg(sc.score) as "avg" from SC sc left join Student s on s.SN = sc.SN  where sc.score < 60 group by sc.SN having count(sc.SN) >=1;
      +------+--------+----------+
      | SN   | SName  | avg      |
      +------+--------+----------+
      | 04   | 李云   | 33.33333 |
      | 06   | 吴兰   | 32.50000 |
      +------+--------+----------+

--16、检索"01"课程分数小于60，按分数降序排列的学生信息
       select * from Student s ,SC sc where s.Sn =sc.SN and sc.score<60 and sc.CN ="01" order by sc.score desc;
       +------+--------+---------------------+------+------+------+-------+
       | SN   | Sname  | Sage                | Ssex | SN   | CN   | score |
       +------+--------+---------------------+------+------+------+-------+
       | 04   | 李云   | 1990-08-06 00:00:00 | 男   | 04   | 01   |  50.0 |
       | 06   | 吴兰   | 1992-03-01 00:00:00 | 女   | 06   | 01   |  31.0 |
       +------+--------+---------------------+------+------+------+-------+

--17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩

       select s.SN "学号",s.Sname as "姓名" ,
       sum(case when sc.CN="01" then score else 0 end ) "语文",
       sum(case when sc.CN="02" then score else 0 end ) "数学",
       sum(case when sc.CN="03" then score else 0 end ) "英语",
       cast(avg(score) as decimal(19,3)) "平均分"
       from Student s left join SC sc on sc.SN=s.SN
       group by sc.SN
       order by avg(score) desc;
       +--------+--------+--------+--------+--------+-----------+
       | 学号   | 姓名   | 语文   | 数学   | 英语   | 平均分    |
       +--------+--------+--------+--------+--------+-----------+
       | 07     | 郑竹   |    0.0 |   89.0 |   98.0 |    93.500 |
       | 01     | 赵雷   |   80.0 |   90.0 |   99.0 |    89.667 |
       | 05     | 周梅   |   76.0 |   87.0 |    0.0 |    81.500 |
       | 03     | 孙风   |   80.0 |   80.0 |   80.0 |    80.000 |
       | 02     | 钱电   |   70.0 |   60.0 |   80.0 |    70.000 |
       | 04     | 李云   |   50.0 |   30.0 |   20.0 |    33.333 |
       | 06     | 吴兰   |   31.0 |    0.0 |   34.0 |    32.500 |
       | 08     | 王菊   |    0.0 |    0.0 |    0.0 |      NULL |
       +--------+--------+--------+--------+--------+-----------+

--17.1 SQL 2000 静态

--17.2 SQL 2000 动态

--17.3 有关sql 2005的动静态写法参见我的文章《普通行列转换(version 2.0)》或《普通行列转换(version 3.0)》。

--18、查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，
      优良率，优秀率 及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90
      select c.CN "课程编号",c.Cname "课程名称",max(sc.score) "最高分" ,min(sc.score) "最低分",avg(sc.score) "平均分" ,
      sum(case when sc.score >=60 then 1 else 0 end )*100/count(sc.CN) "及格率(%)",
      sum(case when sc.score >=70 and sc.score <80 then 1 else 0 end)*100/count(sc.CN) "中等率(%)",
      sum(case when sc.score >=80 and sc.score <90 then 1 else 0 end)*100/count(sc.CN) "优良率(%)",
      sum(case when sc.score >=90 then 1 else 0 end)*100 /count(sc.CN) "优秀率(%)"
      from SC sc right join Course c on c.CN = sc.CN
      group by c.CN
      order by c.CN ;
      +--------------+--------------+-----------+-----------+-----------+--------------+--------------+--------------+--------------+
      | 课程编号     | 课程名称     | 最高分    | 最低分    | 平均分    | 及格率(%)    | 中等率(%)    | 优良率(%)    | 优秀率(%)    |
      +--------------+--------------+-----------+-----------+-----------+--------------+--------------+--------------+--------------+
      | 01           | 语文         |      80.0 |      31.0 |  64.50000 |      66.6667 |      33.3333 |      33.3333 |       0.0000 |
      | 02           | 数学         |      90.0 |      30.0 |  72.66667 |      83.3333 |       0.0000 |      50.0000 |      16.6667 |
      | 03           | 英语         |      99.0 |      20.0 |  68.50000 |      66.6667 |       0.0000 |      33.3333 |      33.3333 |
      +--------------+--------------+-----------+-----------+-----------+--------------+--------------+--------------+--------------+

--19、按各科成绩进行排序，并显示排名

       select rank() over(partition by CN order by score desc) as t,* from sc;
       select ROW_NUMBER() over(partition by c order by score desc) as t,* from sc
       select dense_rank() over(partition by c order by score desc) as t,* from sc
       select ntile(6) over(partition by c order by score desc) as t,* from sc


--19.1 sql 2000用子查询完成
--Score重复时保留名次空缺
--Score重复时合并名次
--19.2 sql 2005用rank,DENSE_RANK完成
--Score重复时保留名次空缺(rank完成)
--Score重复时合并名次(DENSE_RANK完成)
--20、查询学生的总成绩并进行排名
--20.1 查询学生的总成绩
--20.2 查询学生的总成绩并进行排名，sql 2000用子查询完成，分总分重复时保留名次空缺和不保留名次空缺两种。
--20.3 查询学生的总成绩并进行排名，sql 2005用rank,DENSE_RANK完成，分总分重复时保留名次空缺和不保留名次空缺两种。
--21、查询不同老师所教不同课程平均分从高到低显示
--22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩
--22.1 sql 2000用子查询完成
--Score重复时保留名次空缺
--Score重复时合并名次
--22.2 sql 2005用rank,DENSE_RANK完成
--Score重复时保留名次空缺(rank完成)
--Score重复时合并名次(DENSE_RANK完成)
--23、统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比
--23.1 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]
--23.2 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[<60]及所占百分比
--24、查询学生平均成绩及其名次
--24.1 查询学生的平均成绩并进行排名，sql 2000用子查询完成，分平均成绩重复时保留名次空缺和不保留名次空缺两种。
--24.2 查询学生的平均成绩并进行排名，sql 2005用rank,DENSE_RANK完成，分平均成绩重复时保留名次空缺和不保留名次空缺两种。
--25、查询各科成绩前三名的记录
--25.1 分数重复时保留名次空缺
--25.2 分数重复时不保留名次空缺，合并名次
--sql 2000用子查询实现
--sql 2005用DENSE_RANK实现
--26、查询每门课程被选修的学生数
--27、查询出只有两门课程的全部学生的学号和姓名
--28、查询男生、女生人数
--29、查询名字中含有"风"字的学生信息
--30、查询同名同性学生名单，并统计同名人数
--31、查询1990年出生的学生名单(注：Student表中Sage列的类型是datetime)
--32、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列
--33、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩
--34、查询课程名称为"数学"，且分数低于60的学生姓名和分数
--35、查询所有学生的课程及分数情况；
--36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数；
--37、查询不及格的课程
--38、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名；
--39、求每门课程的学生人数
--40、查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩
--40.1 当最高分只有一个时
--40.2 当最高分出现多个时
--41、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩
--42、查询每门功成绩最好的前两名
--43、统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列
--44、检索至少选修两门课程的学生学号
--45、查询选修了全部课程的学生信息
--46、查询各学生的年龄
--46.1 只按照年份来算
--46.2 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
--47、查询本周过生日的学生
--48、查询下周过生日的学生
--49、查询本月过生日的学生
--50、查询下月过生日的学生
